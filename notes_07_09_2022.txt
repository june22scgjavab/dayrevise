Java is an object oriented language.Another approach of programming is procedural approach. 
C programming follows procedural approach.

Where we find the difference in procedural and object oriented approach?

Ans:- In procedural approach concern is more towards solving a problem.
Example is we have to add two numbers. 

void main(){
  int num1=10;
  int num2=20;
  int result=num1+num2;
  printf("%d",result);
}

OR

int add(int a,int b){
int result=a+b;
return result;
}

void main(){
  int num1=10;
  int num2=20;
  int result=0;
  result=add(num1,num2);
  printf("%d",result);
}
// Can we have one more method call subtract?
Ans is yes.
int subtract(int a,int b){
int result=a-b;
return result;
}

int add(int a,int b){
int result=a+b;
return result;
}

void main(){
  int num1=10;
  int num2=20;
  int result=0;
  result=add(num1,num2);
  printf("%d",result);
  result=subtract(num1,num2);
  printf("%d",result);
 }

}

// Do we have any approach where we can keep the variables in such a location so that all the methods
// are able to access them?
Ans Yes. Declare the variables globally ( which means outside the functions).


 int num1=10;
 int num2=20;
 int result=0;

 int add(){
  result=num1+num2;
  return result;
 }

int subtract(){
  result=num1-num2;
  return result;
}

void main(){
   result=add();
   printf("%d",result);
   num1=200;
   num2=100;
   result=subtract();
   printf("%d",result);
 }
In the above approach we have a disadvantage. That is we have kept the data outside the methods. So 
we risk in getting these variables accessed by some other methods which are not relevant.

Example

 calculator.c


int num1=10;
 int num2=20;
 int result=0;

 int add(){
  result=num1+num2;
  return result;
 }

 void inventoryControl(){
  int stock=100;
  num1=0;
  num2=0;
}

int subtract(){
  result=num1-num2;
  return result;
}

void main(){
   result=add();
   printf("%d",result);
   num1=200;
   num2=100;
   result=subtract();
   printf("%d",result);
 }
// So in the above case we can see that we have one method called inventory control which is not having any relevance to calculations but then also it is able to access the numbers and make a change
which is not expected. Here comes the concept of object oriented programming where we try to keep the'
data secured within a unit and that unit is called as class.

------------------------------------------------------------------------------------------------------


class Number{
// num1,num2,result are the instance variables,member variables,attributes of the Number class
private int num1;
private int num2;
private int result;

// add(),subtract(),multiply() are the member methods of the Number class
 int add(){
   result=num1+num2;
   return result;
 }

 int subtract(){
  result=num1-num2;
  return result;
 }

 int multiply(){
   result=num1*num2;
   return result;
 }

}

class Inventory{
private int stock;

 void inventoryControl(){
  stock=100;
  num1=0; // In this case we cannot access num1 and num2 because they are not the member of Inventory class
  num2=0;
}

}


In Object oriented programming we have class and within class we have member variable and member methods.
-----------------------------------------------------------------------------------------------------
package day3revise;

// Everything local within the main method
public class Student {

	public static void main(String[] args) {
	int roll=1;
	String name="Ram";
	int marks=80;
    System.out.println(roll);
    System.out.println(name);
    System.out.println(marks);
    roll=2;
    name="Sita";
    marks=90;
    System.out.println(roll);
    System.out.println(name);
    System.out.println(marks);
	}

}

-------------------------------------------------------------------------------------------------------

Q As we created the two  book objects and both the objects are getting same set of data. Do we have any 
other approach so that they dont get the same set of Data?

package package2;

public class Book {
// bookId,bookTitle and bookPrice are instance variables,attributes
int bookId;
String bookTitle;
float bookPrice;

// setBookDetails, displayBookDetails are member methods
void setBookDetails() {  
	bookId=1;
	bookTitle="Java";
	bookPrice=340.56f;
}
void displayBookDetails() {
	System.out.println(bookId);  //1
  	System.out.println(bookTitle); //Java
    System.out.println(bookPrice); //340.56
}

public static void main(String[] args) {
	Book b1=new Book(); // This line can be further broken into two statements
	// Book b1=null; ===> b1 is a reference variable of Book type and it can store the address of the newly created 
	//book object and currently we are writing as null which means it is not pointing to any object
	//b1=new Book();
	b1.setBookDetails();
	b1.displayBookDetails();
	System.out.println("------------------------");
	Book b2=new Book();
	b2.setBookDetails();
	b2.displayBookDetails();  
	
	}

}
---------------------------------------------------------------------------------------------------
We can go for parameterized setBookDetails

package package3;

public class Book {
// bookId,bookTitle and bookPrice are instance variables,attributes
int bookId;
String bookTitle;
float bookPrice;

// setBookDetails, displayBookDetails are member methods
// we created a parameterized setDetails method
void setBookDetails(int id,String title, float price) {  
	bookId=id;
	bookTitle=title;
	bookPrice=price;
}
void displayBookDetails() {
	System.out.println(bookId);  //1
  	System.out.println(bookTitle); //Java
    System.out.println(bookPrice); //340.56
}

public static void main(String[] args) {
	Book b1=new Book(); 
	b1.setBookDetails(1,"Java",500.56f);
	b1.displayBookDetails();
	System.out.println("------------------------");
	Book b2=new Book();
	b2.setBookDetails(2,"HTML",300);
	b2.displayBookDetails();  
	
	}

}
---------------------------------------------------------------------------------------------------------------
Q Can we design multiple classes and put the main method in separate class?
A Yes
package package4;

// declaring the members as private , wont allow the 
// members to be accessed outside the class
public class Book {
private int bookId;
private String bookTitle;
private float price;

// In the methods we are not using any access
// specifier/modifier like private or public
// so in that case the default modifier is default
// or package specific modifier
// default means the members are accessible in the same 
// package as we will see that both Tester and Book class
//are in same package so Tester will be able to access the
// Book class's setBookDetails and displayBookDetails
void setBookDetails(int id,String title, float prc)
{
	bookId=id;
	bookTitle=title;
	price=prc;
}
void displayBookDetails() {
	System.out.println("The details for the book");
	System.out.println("BOOK ID -:"+bookId);
	System.out.println("BOOK TITLE -:"+bookTitle);
	System.out.println("BOOK PRICE -:"+price);
	
}
}


package package4;

public class Tester {

	public static void main(String[] args) {
	Book book=new Book();
	//Tester and Book are two different classes
	// To access the book class members we have
	// to create an object of book
	//book.bookId=1; //The field Book.bookId is not visible
	book.setBookDetails(1,"Java", 500);
	book.displayBookDetails();
	}

}
----------------------------------------------------------------------------------------------------
Q What I should use while setting the value for an object? Whether I should go for constructors or I should
make use of setter methods.

A some method should be used rather than constructor. Constructors are called once during the object creation.
If we again write something like new Book(), a new object gets created. 


package package5;

public class Book {
private int bookId;
private String bookTitle;
private float price;

// Parameterless constructor/default constructor
Book(){
	bookId=0;
	bookTitle=" ";
	price=0;
	System.out.println("I am the default constructor!!!!");
}
// Parameterised constructor
Book(int id, String title, float prc){
	bookId=id;
	bookTitle=title;
	price=prc;
	System.out.println("I am the parameterized constructor");
	
}


void setBookDetails(int id,String title, float prc)
{
	bookId=id;
	bookTitle=title;
	price=prc;
	
}
void displayBookDetails() {
	System.out.println("The details for the book");
	System.out.println("BOOK ID -:"+bookId);
	System.out.println("BOOK TITLE -:"+bookTitle);
	System.out.println("BOOK PRICE -:"+price);
	
}
}


package package5;

public class Tester {

	public static void main(String[] args) {
	Book book1=new Book(); // The parameterless constructor will be invoked
    book1.displayBookDetails();// We are not executing the setBookDetails
	Book book2=new Book(2,"CSS3",500); // The parameterised constructor is called
	book2.displayBookDetails();
	// I want to change all the details of book2 , so which one I should use constructor
	// or setBookDetails() method or I can use any one of this
	// Why setBookDetails() and why not constructor?
	//book2=new Book(3,"DBMS",800);
	// Is the above line changing the details of the book object created in line 8 or
	//to be more specific , is it same object whose data we are changing?
	// No ... In line 13 a new object got created and the object which got created in line8
	// is longer used by the code
	book2.setBookDetails(3, "DBMS",800);
    book2.displayBookDetails();
	}

}


-----------------------------------------------------------------------------------------------------
Constructors:
*Constructors are used for initialisation of the object.
*Constructor will have the same name as that of the class name.
*Constructor dont have any return type.
*If we dont provide any constructor to our code, the default constructor is provided during the compilation time.
* We can have both parameterised and non-parameterised constructors at the same time.Which means we can have 
multiple constructors.
------------------------------------------------------------------------------------
Q We are observing that whenever you are passing parameters to construcors or methods,
You are changing the name of the parameters and keeping it different from
the instance variables.

public class Book{
 private int bookId;
 private String bookTitle;
 private float bookPrice;

// In the parameterised constructor the parameter names and
// the instance variable names are different. 
// What will happen if we keep the name as same
 Book(int id, String title, float price){
   bookId=id;
   bookTitle=title;
   bookPrice=price;
 } 

 public void displayBook(){
  System.out.println(bookId+"\n"+bookTitle+"\n"+bookPrice);

 }

}
--------------------------------------------------------------------------------------
this is used to represent the current object.
this is also used for constructor chaining.
------------------------------------------------------------------------------------------------------
We have two zones of memory related to the progran/code.

1) Stack=====> method info, local variables, reference variables 
2) Heap ======> objects,arrays
================================================================================================
So the variables in the stack gets destroyed as soon as the scope of the variable ends.

public class Demo {
    public static void main(String[] args){
     int num=10;
   }
}

// The scope and lifetime of the variable num is restricted within the main method. 
-----------------------------------------------------------------------------------------------
The objects and arrays within the heap gets destroyed when the scope ends or we have other explicit
ways also. So here we are talking about the scope of the reference variables which are holding the address for the objects.

For memory management we have a concept called garbage collection. So garbage collection is the way by which in Java , the objects which are not in use are removed so that deallocation of memory can happen
and deallocated memory can be re-used.


public class Customer {
	public String customerId;
	public String customerName;
	public long contactNumber;
	public String address;
	public Customer(String customerId, String customerName, long contactNumber,
			String address) {
		this.customerId = customerId;
		this.customerName = customerName;
		this.contactNumber = contactNumber;
		this.address = address;
	}
	// Methods of this class
}







1. Customer customerObj = new Customer("C101", "Stephen", 7856341287L,
				"D089, Louis Street, Springfield, 62729");


2. customerObj=new Customer("C102", "John", 8856941385L,
				"D090, Louis Street, Springfield, 70000");
The object which got created in line1 is not used further and even in the line2 the reference variable
is assigned with an address of a new object. So the object created in line is is eligible for 
garbage collection. 

--------------------------------------------------------------------------
One object's address can be stored in multiple reference variables.
1. Customer customerObj = new Customer("C101", "Stephen", 7856341287L,
				"D089, Louis Street, Springfield, 62729");
2. Customer customerObj2=customerObj; // The objects which we created line 1, that object's address
is being refered by customerObj2 also. 
3. Customer customerObj3=customerObj2;
----------------------------------------------------------------------------------
Case 1 We store the address of a newly created object in customerObj.
1. Customer customerObj = new Customer("C101", "Stephen", 7856341287L,
				"D089, Louis Street, Springfield, 62729");
2 customerObj=null; // Assigning null to customerObj means currently customerObj is not having
// reference for any object.
--------------------------------------------------------------------------------
1. Customer customerObj=null; // So the reference variable is not storing the address of any object.
2. customerObj = new Customer("C101", "Stephen", 7856341287L,
				"D089, Louis Street, Springfield, 62729");
// In the above line customerObj is pointing/refering to the object created in line2 .
3. customerObj=null;// customerObj is again not pointing to any object as we mentioned.
  // as customerObj=null. ( null is undefined or unknown ).

String str=null;
1. Employee employee=null;
2. employee=new Employee(); 
In the above line the reference of the newly created object is stored in the reference variable 
employee. 
3. employee=null; Now once again employee is not pointing to any object and the object created in line
2 is eligible for garbage collection.


---------------------------------------------------------------------------------------------------

1.Employee employee1=new Employee();
2.Employee employee2=employee1;
3.employee1=null; 

Do you think the object which got created in line1 is eligible for garbage collection.
Ans No.
----------------------------------------------------------------------------------------------------

public class Student {

  private int roll;
  private String name;
  private int marks;

}



public class StudentMain{
   public static void main(String[] args) {
    Student student=new Student(); // The scope and lifetime is restricted to this method main.

  }
}

-------------------------------------------------------------------------------------------------------
Suppose both these codes are written in a single file and both the classes are public. Can we have
two public classes in the same file?
Ans: No because file name and class name should be same if the class is declared as public . Example if we have a class, public class Demo{} , in that case the file name will be also taken as Demo.java.
If not done gives compilation error. In the below demo code, the file name is Tester.java but
we have two public classes, Customer and another is Tester.
Either you create a separate file for Customer or remove the public access from Customer.


package com.infosys.encapsulation;
public class Customer {
	public String customerId;
	public String customerName;
	public long contactNumber;
	public String address;
    
    public void displayCustomerDetails() {
		System.out.println("Displaying customer details \n***********");
		System.out.println("Customer Id : " + customerId);
		System.out.println("Customer Name : " + customerName);
		System.out.println("Contact Number : " + contactNumber);
		System.out.println("Address : " + address);
		System.out.println();
	}
}
public class Tester {
	public static void main(String args[]) {
		Customer customer = new Customer();
		customer.customerId = "C101";
		customer.customerName = "Stephen Abram";
		customer.contactNumber = 7856341287L;
		customer.address = "D089, St. Louis Street, Springfield, 62729";
		customer.displayCustomerDetails();
	}
}
--------------------------------------------------------
So the solution is removing public access with the class Customer.

package com.infosys.encapsulation;
class Customer {
	public String customerId;
	public String customerName;
	public long contactNumber;
	public String address;
    
    public void displayCustomerDetails() {
		System.out.println("Displaying customer details \n***********");
		System.out.println("Customer Id : " + customerId);
		System.out.println("Customer Name : " + customerName);
		System.out.println("Contact Number : " + contactNumber);
		System.out.println("Address : " + address);
		System.out.println();
	}
}
public class Tester {
	public static void main(String args[]) {
		Customer customer = new Customer();
		customer.customerId = "C101";
		customer.customerName = "Stephen Abram";
		customer.contactNumber = 7856341287L;
		customer.address = "D089, St. Louis Street, Springfield, 62729";
		customer.displayCustomerDetails();
	}
}

----------------------------------------------------------------------------------------------------